---
title: "Safe Shell Command Execution Practice"
priority: 503
tier: practice
description: "Patterns for executing shell commands safely in scripts and automation."
tags: ["shell", "scripting", "automation", "safety", "execution", "commands"]
---

# Safe Shell Command Execution

## When to Apply
Apply these patterns whenever executing shell commands in scripts, automation, or when generating shell commands for others to execute.

## Actions
- **Verify project root before executing commands**:
  ```bash
  # Go to project root and verify
  cd "$(git rev-parse --show-toplevel)" || {
    echo "❌ Failed to navigate to project root"
    exit 1
  }
  ```

- **Make pager commands non-interactive**:
  ```bash
  # Instead of:
  git log

  # Use:
  git log | cat
  # OR
  git --no-pager log
  ```

- **Set non-interactive environment**:
  ```bash
  # Set up non-interactive environment
  export DEBIAN_FRONTEND=noninteractive
  export GIT_PAGER=cat
  export PAGER=cat
  ```

- **Check command existence**:
  ```bash
  # Check if command exists
  if ! command -v git &> /dev/null; then
    echo "❌ Git is not installed"
    exit 1
  fi
  ```

- **Add error handling**:
  ```bash
  # Execute with error handling
  if ! some_command arg1 arg2; then
    echo "❌ Command failed"
    exit 1
  fi
  ```

- **Clean up temporary files**:
  ```bash
  # Create and register temp file for cleanup
  temp_file=$(mktemp)
  trap 'rm -f "$temp_file"' EXIT

  # Use temp file
  echo "data" > "$temp_file"
  cat "$temp_file"
  ```

## Common Pitfalls
- Running commands without verifying directory context
- Using interactive commands that wait for user input
- Forgetting to append `| cat` to pager commands
- Not checking command exit status
- Leaving temporary files uncleaned
- Using relative paths without clear context