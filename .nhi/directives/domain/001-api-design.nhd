---
title: "API Design Principles"
priority: 3
scope: "domain"
binding: true
timestamps:
  created: "2023-07-15T13:00:00Z"
  updated: "2023-07-15T13:00:00Z"
tags: ["api", "design", "rest", "http"]
applies_to: ["api/**/*", "**/*Service.{js,ts}", "**/*Controller.{js,ts}"]
---

# API Design Principles

## Intent
Establish consistent, predictable, and intuitive API interfaces that follow REST principles, maintain backward compatibility, and enable efficient client-server interactions.

## Rules
- Use resource-oriented URL paths (nouns, not verbs)
- Implement standard HTTP methods appropriately:
  - GET for retrieving resources (never for mutations)
  - POST for creating resources or complex operations
  - PUT for complete resource updates
  - PATCH for partial resource updates
  - DELETE for resource removal
- Return appropriate HTTP status codes:
  - 200: Success
  - 201: Created
  - 204: No Content (success with no response body)
  - 400: Bad Request
  - 401: Unauthorized
  - 403: Forbidden
  - 404: Not Found
  - 500: Server Error
- Version all APIs in the URL path (e.g., /v1/resources)
- Use plural nouns for resource collections (/users, not /user)
- Nest sub-resources for relationships (/users/{id}/comments)
- Implement consistent pagination for collections
  - Use limit/offset or cursor-based pagination
  - Include total counts when feasible
- Return JSON by default with proper Content-Type headers
- Implement proper error responses with:
  - Appropriate status code
  - Error message
  - Error code (for client identification)
  - Reference ID (for server-side logging)
- Document all endpoints with OpenAPI/Swagger

## Examples
```
# Good
GET /v1/users                  # List users
GET /v1/users/123              # Get specific user
POST /v1/users                 # Create user
PUT /v1/users/123              # Update user
DELETE /v1/users/123           # Delete user
GET /v1/users/123/comments     # List comments for user

# Bad
GET /v1/getUsers               # Verb in URL
GET /v1/user/123               # Singular resource name
POST /v1/users/createUser      # Redundant verb
GET /v1/deleteUser?id=123      # GET for deletion
```

## Exceptions
- Real-time streaming endpoints may use custom conventions
- Internal-only APIs may prioritize performance over strict REST compliance
- Legacy APIs may maintain non-compliant patterns for compatibility