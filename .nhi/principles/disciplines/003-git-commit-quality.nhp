---
title: "Git Commit Quality"
priority: 3
disciplines: ["version-control", "collaboration", "documentation"]
---

# Git Commit Quality

## Core Statement
Commits must clearly document both what changed and why, using consistent structure, accurate descriptions, and appropriate context to serve as a reliable historical record.

## Rationale
Version history is a critical form of documentation that enables effective collaboration, troubleshooting, and knowledge transfer. High-quality commits create a navigable and understandable history of project evolution, reducing cognitive load and supporting future maintenance. Poor commit practices obscure intent and make project history difficult to understand.

## Applications
- Use descriptive, action-oriented titles that summarize the change
- Format commit messages consistently with appropriate structure
- Focus on explaining why changes were made, not just what was changed
- Provide sufficient context for future developers to understand decisions
- Reference related issues, tickets, or documentation
- Keep commits focused on single, logical changes when possible
- Document technical decisions and trade-offs considered
- Preserve important implementation details when not obvious from code
- Use appropriate metadata to increase findability and categorization
- Avoid technical implementation details that are better left in code comments