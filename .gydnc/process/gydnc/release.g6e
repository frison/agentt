---
title: gydnc Release Process Guide
description: Complete workflow for releasing gydnc CLI from the gydnc/ directory with automated builds and professional release notes
tags:
    - type:process
    - scope:release
    - repo:gydnc
    - tech:git
    - tech:github-actions
    - target:maintainer
    - quality:high
---

# 🚀 gydnc Release Process Guide

## ⚠️ CRITICAL: gydnc/ Directory Context

**ALL OPERATIONS MUST BE PERFORMED FROM THE gydnc/ DIRECTORY ROOT**

This release process is specifically designed for the `gydnc/` directory within the repository. The GitHub Actions, file paths, and commands assume you are working within the gydnc project structure.

```bash
# ALWAYS ensure you are in the correct directory first
cd /path/to/your/repo/gydnc/
pwd  # Should show: .../gydnc
```

## 🎯 Overview

This guidance covers the complete workflow for releasing gydnc CLI, from analyzing changes to triggering the GitHub Actions release pipeline. The process emphasizes security, transparency, and beautiful presentation while operating specifically within the `gydnc/` directory structure.

## 📋 Release Workflow

### 1. Pre-Release Analysis (gydnc/ Context)

**Navigate to gydnc Directory**
```bash
# MANDATORY: Work from gydnc/ directory
cd gydnc/
pwd  # Verify you're in: .../gydnc
```

**Discover Previous Release**
```bash
# Find the latest release version in gydnc/releases/
PREVIOUS_RELEASE=$(find releases/ -name "v*.md" | sort | tail -1 | basename | sed 's/\.md$//')
echo "Previous gydnc release: $PREVIOUS_RELEASE"
```

**Analyze Changes Since Last Release (gydnc/ Scope)**
```bash
# Find the commit that added the previous release file in gydnc/
RELEASE_COMMIT=$(git log --format=%H -n 1 -- "gydnc/releases/${PREVIOUS_RELEASE}.md")

# Get commits since last release affecting ONLY gydnc/ directory
git log --oneline ${RELEASE_COMMIT}..HEAD -- gydnc/

# Detailed analysis with commit details for gydnc/ changes
git log --format="%h|%s|%an|%ad" --date=short ${RELEASE_COMMIT}..HEAD -- gydnc/
```

**Important**: Only changes within the `gydnc/` directory are relevant for gydnc releases. Changes to other parts of the repository should be ignored.

### 2. Release Notes Generation (gydnc/ Focused)

**Categorize gydnc Changes**

Analyze commit messages affecting `gydnc/` and categorize them:

- **✨ Features**: `feat:`, `feature:`, `add:`, `new:`, `implement:`
- **🐛 Bug Fixes**: `fix:`, `bug:`, `patch:`, `resolve:`, `correct:`
- **⚡ Performance**: `perf:`, `performance:`, `optimize:`, `speed:`
- **🔧 Improvements**: `improve:`, `enhance:`, `refactor:`, `update:`, `upgrade:`
- **📚 Documentation**: `docs:`, `doc:`, `documentation:`, `readme:`, `comment:`
- **🧪 Tests**: `test:`, `tests:`, `testing:`, `spec:`, `coverage:`
- **🏗️ Build & CI**: `build:`, `ci:`, `cd:`, `workflow:`, `action:`, `makefile`, `docker:`

**Generate gydnc Statistics**
```bash
# Count commits and contributors for gydnc/ directory only
COMMIT_COUNT=$(git rev-list --count ${RELEASE_COMMIT}..HEAD -- gydnc/)
CONTRIBUTOR_COUNT=$(git log --format="%an" ${RELEASE_COMMIT}..HEAD -- gydnc/ | sort -u | wc -l)

echo "📊 gydnc Release Statistics:"
echo "- $COMMIT_COUNT commits from $CONTRIBUTOR_COUNT contributor(s)"
echo "- Released on $(date '+%B %d, %Y')"
echo "- Scope: gydnc CLI tool changes only"
```

### 3. Create Release File (gydnc/releases/)

**CRITICAL PATH**: Create `gydnc/releases/vX.Y.Z.md` with:

```bash
# Create release file in the correct gydnc/releases/ directory
cat > releases/v1.2.3.md << 'RELEASE_EOF'
# Release content here...
RELEASE_EOF
```

Include:
- Header with version and gydnc-specific stats
- Categorized changes with commit links (gydnc/ scope only)
- Download instructions for all platforms
- Verification and quick start sections
- Professional styling with emojis and tables

### 4. Trigger gydnc Release

1. **Commit the release file from gydnc/ context**:
   ```bash
   # From gydnc/ directory
   git add releases/v1.2.3.md
   git commit -m "gydnc: Release v1.2.3"
   git push origin main
   ```

2. **GitHub Actions automatically**:
   - Detects new file in `gydnc/releases/`
   - Builds multi-platform gydnc binaries
   - Creates GitHub release with gydnc artifacts
   - Uses gydnc-specific build configuration

## 🔍 Quality Standards (gydnc Specific)

- **gydnc Context**: All content must be clearly about gydnc CLI
- **Directory Awareness**: All paths relative to `gydnc/` directory
- **Beautiful formatting**: Use emojis, tables, and proper markdown
- **Complete provenance**: Every gydnc commit linked with full SHA
- **Professional tone**: Engaging but informative language
- **Security focus**: Emphasize gydnc binary verification and checksums
- **User-friendly**: Clear gydnc installation and usage instructions
- **Contributor recognition**: Acknowledge all gydnc contributors

## 🎨 Styling Guidelines for gydnc Releases

- Use descriptive emojis for visual appeal
- Structure with clear headers emphasizing gydnc functionality
- Include code blocks with proper syntax highlighting for gydnc commands
- Provide direct download links for gydnc binaries
- Add verification instructions for gydnc installations
- Include gydnc quick start guides

## ⚠️ Common Pitfalls to Avoid

1. **Wrong Directory**: Not working from `gydnc/` directory
2. **Mixed Scope**: Including non-gydnc changes in release notes
3. **Wrong File Path**: Creating release files outside `gydnc/releases/`
4. **Build Context**: GitHub Actions expect gydnc-specific structure

## 🔄 Verification Steps

Before finalizing any gydnc release:

```bash
# Verify you're in gydnc/ directory
pwd | grep -q "gydnc$" && echo "✅ Correct directory" || echo "❌ Wrong directory"

# Verify release file is in correct location
ls -la releases/v*.md | tail -1

# Verify commits analyzed are gydnc-scoped
git log --oneline HEAD~5..HEAD -- gydnc/
```

This process ensures every gydnc release is beautifully documented, properly verified, and presents a professional image while maintaining the highest security standards **specifically for the gydnc CLI tool**.
