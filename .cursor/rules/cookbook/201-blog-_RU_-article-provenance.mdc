---
description: Recipe for adding git commit provenance to blog articles
globs: ["blog/content/*.md"]
alwaysApply: false
---

# Add Git Commit Provenance to Blog Article

## Prerequisites
- Article committed to git in blog/content/
- [Git History Preservation](850-core-C_U_-git-history-preservation.mdc)

## Steps
1. Get article creation commit SHA:
   ```bash
   COMMIT_SHA=$(git rev-parse HEAD)
   ```

2. Add to frontmatter:
   ```yaml
   provenance:
     repo: "https://github.com/frison/agentt"
     commit: "${COMMIT_SHA}"  # The commit where this article was created
     prompt: "${PROMPT_SHA}"  # Optional: The commit that prompted this article's creation
     modifications: []  # List of modification commit SHAs
   ```

3. Append to article:
   ```markdown
   ---

   *This article was originally created in commit [`${COMMIT_SHA}`](https://github.com/frison/agentt/commit/${COMMIT_SHA})${PROMPT_TEXT}.*
   ```
   where `${PROMPT_TEXT}` is `, prompted by commit [\`${PROMPT_SHA}\`](https://github.com/frison/agentt/commit/${PROMPT_SHA})` if a prompt commit exists, or empty string if not.

4. Commit changes:
   ```bash
   git add blog/content/your-article.md
   git commit -m "docs(blog): add provenance information"
   ```

## Adding Modification Attestation

1. Get modification commit SHA:
   ```bash
   MOD_SHA=$(git rev-parse HEAD)
   ```

2. Update frontmatter modifications array:
   ```yaml
   provenance:
     repo: "https://github.com/frison/agentt"
     commit: "original-sha"
     modifications:
       - "${MOD_SHA}"
   ```

3. Append to article's provenance section:
   ```markdown
   *Modified in commit [`${MOD_SHA}`](https://github.com/frison/agentt/commit/${MOD_SHA}).*
   ```

4. Commit changes:
   ```bash
   git add blog/content/your-article.md
   git commit -m "docs(blog): add modification provenance"
   ```

## Validation
- Provenance points to article creation commit
- If present, prompt points to the commit that inspired the article
- Modifications list contains all update commits
- Links use absolute URLs
- Original commit SHA preserved
- Provenance statements isolated from content