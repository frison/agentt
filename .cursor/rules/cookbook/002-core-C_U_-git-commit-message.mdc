---
description: Guidelines for creating and updating git commit messages
globs: []
alwaysApply: false
---

# Git Commit Message Creation

## Required Sequence
1. STOP - Do not proceed until completing these steps
2. Verify you are in project root directory
3. Check all prerequisites are met
4. Follow steps in order

## Prerequisites
- STOP - Verify project root directory before ANY operations
- Git installed and configured
- Changes staged for commit
- Read [Shell Commands](004-core-C_U_-shell-commands.mdc)
- Read [Writing for Public Consumption](900-core-C_U_-writing-for-public-consumption.mdc)

## Directory Context
1. MUST be in project root (parent of .cursor/)
2. Verify:
   ```bash
   test -d .cursor || { echo "Not in project root"; exit 1; }
   ```
3. Required paths (all relative to root):
   - `.cursor/tmp/`: Temporary file storage
   - `.git/`: Repository metadata

## Steps
1. Verify prerequisites:
   ```bash
   test -d .cursor || { echo "Not in project root"; exit 1; }
   git rev-parse --git-dir > /dev/null 2>&1 || {
       echo "❌ Not in a git repository"
       exit 1
   }
   ```

2. Create message file:
   ```bash
   cat > .cursor/tmp/commit_msg.txt << 'EOF'
   # Title (50 chars max, imperative mood)
   <intentional blank line>
   # Body (72 chars per line, explain what and why)
   <body>

   # Footer (references, metadata)
   <footer>
   EOF
   ```

3. Apply commit:
   ```bash
   git commit -F .cursor/tmp/commit_msg.txt
   rm .cursor/tmp/commit_msg.txt
   ```

## Message Structure
1. Title (REQUIRED):
   - 50 characters maximum
   - Imperative mood ("Add" not "Added")
   - Capitalize first word
   - No period at end

2. Body (REQUIRED):
   - 72 characters per line
   - Explain what and why, not how
   - Use markdown formatting
   - Preserve emoji if present

3. Footer (OPTIONAL):
   - Reference issues/PRs
   - Add metadata tags
   - One item per line

## Common Mistakes
❌ NEVER:
- Skip project root verification
- Exceed character limits
- Mix tenses in title
- Describe implementation details
- Leave context unclear
- Delete required sections

✅ ALWAYS:
- Verify project root first
- Use imperative mood in title
- Add blank line after title
- Explain motivation
- Reference related issues
- Follow character limits

## Example
```bash
# REQUIRED - Verify project root
test -d .cursor || { echo "Not in project root"; exit 1; }

# Create commit
cat > .cursor/tmp/commit_msg.txt << 'EOF'
Add user authentication to API

Implement JWT-based authentication to secure API endpoints.
This change is required for GDPR compliance and improves
overall system security.

Refs: #123, #456
Security: High
EOF

git commit -F .cursor/tmp/commit_msg.txt
rm .cursor/tmp/commit_msg.txt
```

## Maintenance
- Keep examples up to date
- Update character limits if standards change
- Add new metadata tags as needed
- Remove obsolete troubleshooting steps