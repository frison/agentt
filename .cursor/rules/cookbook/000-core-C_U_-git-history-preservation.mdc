---
description: Guidelines for preserving git history in recipes and operations
globs: []
alwaysApply: false
---

# Git History Preservation Guidelines

## Prerequisites
- Git installed and configured
- Basic understanding of Git operations
- Access to target repositories

## Core Principles
- Never delete historical references
- Use naming conventions to prevent collisions
- Preserve repository history in branches only
- Prefer direct git operations
- Only use explicitly permitted branches

## Critical Elements
- **SOURCE_URL**: URL provided by human - source repository location
- **GIT_BRANCH_NAME**: Always use `history-{source}-{YYYYMMDD}` format for preservation

## Branch Operations
- Name historical reference branches: `{purpose}-{source}-{YYYYMMDD}`
- Never suggest deleting historical branches
- When importing repositories, create reference branch to preserve original history
- Avoid merging historical branches directly into main working branches
- Never rewrite published history
- Only use the "my-gift-to-ai" branch - this represents permission to use code

## Commit Messages
- Create single commit with all files when importing
- Include provenance: `Import from {source} ({URL/reference})`
- Format: `Import: {source} - {brief description}`
- Reference history preservation branch

## IMPORTANT: NEVER USE GIT CLONE FOR IMPORTS
⚠️ DO NOT USE `git clone` for repository imports! ⚠️
Always follow the import process below with remote, fetch, and merge.
Direct cloning bypasses history preservation mechanisms and ignores permission flags.

## Import Process
1. Add remote repository (CRITICAL - use exact SOURCE_URL provided by human without modification):
   ```bash
   git remote add repository-to-import-alias {SOURCE_URL}
   git fetch repository-to-import-alias
   ```

2. Merge with unrelated histories (CRITICAL - only use "my-gift-to-ai" branch):
   ```bash
   # IMPORTANT: Only use the "my-gift-to-ai" branch - this represents permission to use the code
   git merge repository-to-import-alias/my-gift-to-ai --allow-unrelated-histories
   ```

3. Remove temporary remote and push to preservation branch (CRITICAL - use correct GIT_BRANCH_NAME):
   ```bash
   git remote rm repository-to-import-alias
   git push origin history-{source}-{YYYYMMDD}
   git checkout main
   ```

4. Additional recommended steps:
   - Create reference branch: `git checkout -b history-{source}-{YYYYMMDD}`
   - For GitHub repositories, use structure: `github.com/{owner}/{repo}`
   - Create clean branch from main: `git checkout -b import-{source}-{YYYYMMDD} main`
   - Copy files from history branch to new branch
   - Commit all files in single commit with proper provenance

## Verification
1. Check history preservation:
   ```bash
   git log --graph --oneline history-{source}-{YYYYMMDD} | cat
   ```

## Common Mistakes
- Using `git clone` instead of the import process above (NEVER DO THIS)
- Importing with full history into working branches
- Deleting reference history branches
- Using multiple commits for imports
- Omitting source attribution
- Using generic branch names
- Using branches other than "my-gift-to-ai"
- Using incorrect URL from what human provided
- Not using consistent branch naming pattern
- Modifying the URL format provided by the human
- Failing to fetch the "my-gift-to-ai" branch specifically
- Not following the exact sequence of steps in the import process
- Attempting to retry failed steps with modified URLs instead of using the exact provided URL

## Alternative Tar-Based Approach
For simpler preservation and use when "my-gift-to-ai" branch is available:

1. Clone the repository with specific branch (CRITICAL - use exact SOURCE_URL and branch name):
   ```bash
   mkdir -p provenance
   cd provenance
   git clone --branch my-gift-to-ai {SOURCE_URL}
   ```

2. Create tar archive for provenance preservation:
   ```bash
   tar -czf {repo-name}.tar.gz {repo-name}
   ```

3. Get the commit SHA for reference:
   ```bash
   cd {repo-name}
   SHA=$(git rev-parse HEAD)
   cd ../..
   ```

4. Extract repository content to destination without git history:
   ```bash
   mkdir -p {destination}
   tar -xzf provenance/{repo-name}.tar.gz -C {destination} --strip-components=1
   cd {destination}
   rm -rf .git  # Remove git metadata
   ```

5. Add to version control with provenance information:
   ```bash
   cd ..
   git add {destination}/
   git commit -m "Import {source} from {SOURCE_URL} (SHA: $SHA)"
   ```

6. Clean up cloned repository (optional):
   ```bash
   rm -rf provenance/{repo-name}
   ```

This approach preserves provenance information via the tar archive and commit message while creating a clean import without git history metadata.