---
description: Recipe for creating, reading, and updating blog posts with consistent structure and provenance
globs: ["blog/content/*.md"]
alwaysApply: false
---

# Blog Post Creation and Updates

## Prerequisites
- [Time Awareness](../005-core-_R__-time-awareness.mdc)
- [Blog Directory Structure](../200-blog-_R__-directories.mdc)
- [Writing for Public Consumption](900-core-C_U_-writing-for-public-consumption.mdc)
- [Article Provenance](201-blog-_RU_-article-provenance.mdc)

## File Structure
1. Name: `YYYY-MM-DD-kebab-case-title.md`
2. Location: `blog/content/` directory

## Frontmatter Format
```yaml
---
layout: post
title: Your Title Here
date: YYYY-MM-DD HH:MM:SS -0600
categories:
  - category1
  - category2
  - category3
---
```

Notes on frontmatter:
- Title uses hyphens instead of colons for separators
- Date includes time and timezone (standardized to -0600)
- Categories are listed as YAML array items with hyphens
- Category names use hyphens instead of spaces
- No quotes around any values
- Optionally add relevant emojis to the title for increased visibility and engagement

## Content Structure
1. **Introduction**
   - No heading
   - Sets context
   - Clear problem statement
   - Consider adding a conversational hook or humor to engage readers

2. **Main Sections**
   - Use H2 (`##`) headings
   - Descriptive section titles
   - Double newline between sections
   - Code blocks with language specification
   ```language
   code here
   ```
   - Optionally add relevant emojis to section headings for visual signposting
   - Include occasional humor or relevant asides in parentheses for engagement

3. **Conclusion**
   - H2 heading (typically "Looking Forward")
   - Summarize key points
   - Future implications
   - End with a memorable statement or humor to leave an impression

4. **Provenance Footer**
   - Horizontal rule separator
   - Generated after initial commit
   - Must match frontmatter exactly

## Engagement Enhancements
1. **Emoji Usage**
   - Add relevant emojis to titles and section headings
   - Use emojis as visual markers for key points or tips
   - Don't overuse; 1-2 emojis per heading is sufficient
   - Ensure emojis are relevant to technical content

2. **Humor Guidelines**
   - Use light humor that enhances rather than distracts from technical content
   - Add parenthetical asides for relatable observations
   - Include analogies that make technical concepts more accessible
   - Target a "Reddit-worthy" style that's clever without undermining credibility
   - Maintain professional tone even with humorous elements

3. **Formatting for Engagement**
   - Use bullet points for better readability
   - Add parenthetical comments for extra context or humor
   - Include "what could go wrong?" rhetorical questions for complex operations
   - Use light self-deprecation when discussing challenging implementations

## Creation Process
1. Create file with proper name
2. Add frontmatter without provenance
3. Write content following structure
4. Add engagement elements (emojis, humor) where appropriate
5. Commit post
6. Add provenance information
7. Commit provenance update

## Validation Steps
1. **SHA Consistency**
   - Frontmatter commit SHA matches footer
   - Frontmatter prompt SHA matches footer
   - All SHAs are complete (not abbreviated)
   - SHAs verified from git history

2. **Content Quality**
   - No H1 headings (reserved for title)
   - Proper section spacing
   - Language-specified code blocks
   - Links use absolute URLs
   - Technical accuracy in examples
   - Emojis and humor enhance rather than detract from content

## Common Mistakes
- Inconsistent SHAs between frontmatter and footer
- Abbreviated SHAs
- Missing language in code blocks
- Incorrect heading hierarchy
- Insufficient section spacing
- Overuse of emojis that diminish readability
- Humor that undermines technical credibility