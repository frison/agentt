# Language Migration from cortex_import to cortex

## Required Discovery Sequence
1. STOP - Do not proceed until completing these steps
2. Verify you are in project root directory
3. Examine cortex_import structure to understand available languages
4. Determine human-comprehendable languages for specific tasks
5. Test selected languages for compatibility with current environment
6. Document findings before migration

## Prerequisites
- STOP - Verify project root directory before ANY operations
- Git installed and configured
- Docker installed and configured (needed for testing some language environments)
- Make utility installed (needed for building and testing languages)
- Read [Git History Preservation](850-core-C_U_-git-history-preservation.mdc)
- Read [Shell Commands](004-core-C_U_-shell-commands.mdc)

## Directory Context
1. MUST be in project root (parent of .cursor/)
2. Verify:
   ```bash
   test -d .cursor || { echo "Not in project root"; exit 1; }
   ```
3. Required paths (all relative to root):
   - `cortex_import/`: Source languages directory (100hellos project)
   - `cortex/`: Destination directory for migrated languages
   - `.cursor/tmp/`: Temporary directory for all operations (REQUIRED)
       - Use for all intermediate files
       - Clean up after use
       - Never create temporary directories elsewhere

## cortex_import Structure
The cortex_import directory contains:
- 70+ language subdirectories (e.g., python/, javascript/, ruby/)
- Each language directory typically contains:
  - Dockerfile: Container definition for the language environment
  - Makefile: Build instructions
  - files/: Directory containing source code examples
    - hello-world.[ext]: Basic hello world program in that language
- Supporting files:
  - README.md: Documentation for the 100hellos project
  - DEVELOPERS.md: Contribution guidelines
  - Makefile: Project-wide build instructions
  - .template/: Template for new language additions

## Discovery Steps
1. List available languages (REQUIRED):
   ```bash
   mkdir -p .cursor/tmp
   find cortex_import -maxdepth 1 -type d -not -path "cortex_import" -not -path "cortex_import/.*" | sort > .cursor/tmp/available_languages.txt
   cat .cursor/tmp/available_languages.txt
   ```

2. Examine language structure (REQUIRED):
   ```bash
   # For a specific language (replace LANGUAGE with actual language name)
   find cortex_import/LANGUAGE -type f | sort > .cursor/tmp/language_files.txt
   cat .cursor/tmp/language_files.txt

   # Show sample code structure
   cat cortex_import/LANGUAGE/files/hello-world.* > .cursor/tmp/hello_world_sample.txt
   cat .cursor/tmp/hello_world_sample.txt
   ```

3. Analyze language suitability (REQUIRED):
   ```bash
   # Create analysis file
   mkdir -p .cursor/tmp/language_analysis
   cat > .cursor/tmp/language_analysis/LANGUAGE.md << 'EOF'
   # Language Analysis: LANGUAGE

   ## Readability
   - <Assessment of human comprehensibility>

   ## I/O and Git Support
   - <Assessment of file I/O capabilities>
   - <Assessment of git command execution/parsing>

   ## Dependencies
   - <List required dependencies>
   - <Note any installation complexities>

   ## Reliability
   - <Assessment of execution reliability>
   - <Notes on cross-platform compatibility>

   ## Adoption
   - <Notes on familiarity and widespread use>

   ## Recommendation
   - <Overall recommendation with rationale>
   EOF

   # Fill in the analysis manually with actual assessments
   ```

4. Test language compatibility (REQUIRED):
   ```bash
   # Test using the provided Makefile system and log results
   cd cortex_import && make LANGUAGE R=1 > ../.cursor/tmp/language_test_results.log 2>&1
   cd .. && cat .cursor/tmp/language_test_results.log

   # Alternatively, test directly if Docker is available
   cd cortex_import/LANGUAGE && docker build -t test-language . > ../../.cursor/tmp/docker_build.log 2>&1
   docker run --rm test-language > ../../.cursor/tmp/docker_run.log 2>&1
   cd ../.. && cat .cursor/tmp/docker_build.log .cursor/tmp/docker_run.log
   ```

5. Document language selection (REQUIRED):
   ```bash
   # Document final selection with rationale
   cat > .cursor/tmp/selected_language.md << 'EOF'
   # Selected Language: LANGUAGE

   ## Selection Rationale
   - <Key reasons for selection>
   - <Advantages over alternatives>
   - <Specific features supporting provenance tasks>

   ## Implementation Plan
   - <Outline of implementation approach>
   EOF
   ```

## Migration Steps
1. Create destination structure (REQUIRED):
   ```bash
   # Ensure cortex directory exists
   mkdir -p cortex
   ```

2. Move language files (REQUIRED):
   ```bash
   # Simple move operation preserves all file attributes and hashes
   # First, create a list of directories/files to move, excluding .github
   find cortex_import -mindepth 1 -maxdepth 1 -not -path "cortex_import/.github" | sort > .cursor/tmp/to_move.txt

   # Move each item to the cortex directory
   cat .cursor/tmp/to_move.txt | while read item; do
     mv "$item" cortex/
   done

   # Verify the move was successful
   find cortex -type d -maxdepth 1 | sort > .cursor/tmp/moved_dirs.txt
   cat .cursor/tmp/moved_dirs.txt
   ```

3. Generate language-specific provenance tool (REQUIRED):
   - Select appropriate language based on discovery analysis
   - Implement article provenance attestation functionality in cortex/LANGUAGE/provenance/
   - Follow the [Article Provenance](201-blog-_RU_-article-provenance.mdc) recipe
   - Required operations:
     - Parse git commit information
     - Generate standardized attestation format
     - Output to file or standard output

4. Test provenance tool (REQUIRED):
   ```bash
   # Create test script in temporary directory first
   mkdir -p .cursor/tmp
   cat > .cursor/tmp/test_provenance.sh << 'EOF'
   #!/bin/bash
   set -euo pipefail

   # Get the latest commit hash
   COMMIT_HASH=$(git rev-parse HEAD)

   # Run the provenance tool
   cd "$(dirname "$0")" && ./provenance_tool.* "$COMMIT_HASH"
   EOF

   # Copy to destination and set permissions
   cp .cursor/tmp/test_provenance.sh cortex/LANGUAGE/provenance/
   chmod +x cortex/LANGUAGE/provenance/test_provenance.sh

   # Clean up temporary file
   rm .cursor/tmp/test_provenance.sh

   # Run the test
   cd cortex/LANGUAGE/provenance && ./test_provenance.sh
   ```

5. Update blog rules to use new tool (REQUIRED):
   - Modify article-provenance rule to reference new implementation
   - Document language selection rationale

## Verification
- Selected language is human-comprehendable for the specific task
- Language files correctly migrated to cortex directory with original file identity preserved
- Provenance tool successfully generates attestations
- Updated rules correctly reference new implementation
- Provenance chain maintained through direct file moves

## Common Mistakes
❌ NEVER:
- Skip discovery and evaluation steps
- Migrate languages without testing
- Use absolute paths
- Copy files instead of moving them (may break provenance)
- Create temporary files outside of .cursor/tmp
- Leave temporary files in .cursor/tmp after completion
- Use text editors that might change line endings or encodings

✅ ALWAYS:
- Document language selection rationale
- Test before and after migration
- Use relative paths
- Maintain original file structure
- Validate provenance tool functionality
- Use .cursor/tmp for all temporary files
- Clean up .cursor/tmp when operations are complete
- Use move operations (mv) to preserve file identity
- Document provenance chain in commit messages

## Provenance Considerations
- File moves (mv) preserve file identity and all metadata
- Moving files maintains exact provenance by keeping the original file (just in a new location)
- Moving is preferred over copying for provenance preservation
- Excluding .github directory prevents repository-specific configuration issues
- Document the move operation in commit messages to maintain provenance chain

## Maintenance
- This is an ephemeral rule
- Delete after completion of migration
- Document any issues encountered
- Clean up all files in .cursor/tmp related to this operation
- Command to clean temporary files:
  ```bash
  find .cursor/tmp -type f -name "language_*" -delete
  find .cursor/tmp -type f -name "*_language*" -delete
  find .cursor/tmp -type f -name "hello_world_sample.txt" -delete
  find .cursor/tmp -type d -name "language_analysis" -exec rm -rf {} \; 2>/dev/null || true
  ```