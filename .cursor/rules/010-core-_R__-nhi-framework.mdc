---
description: REQUIRED rule defining the complete NHI Framework and discovery process across all tiers.
globs: []
alwaysApply: true
---
# NHI Framework: MUST → SHOULD

## Framework Overview & RFC 2119 Alignment
- This framework uses two hierarchical tiers, conceptually aligned with RFC 2119 requirement levels:
  1. **MUST Requirements** (`.nhi/must/`) - Formerly "Needs". These represent non-negotiable requirements, constraints, and core values. They are absolute requirements (**MUST** / **REQUIRED** per RFC 2119). Failure to comply constitutes a violation of core principles.
  2. **SHOULD Recommendations** (`.nhi/should/`) - Formerly "Practices". These provide guidance, patterns, and recommended procedures. They are generally expected to be followed (**SHOULD** / **RECOMMENDED** per RFC 2119). Valid reasons may exist to deviate, but the implications must be understood, and deviations must *never* violate a MUST requirement.
- Always process in order: MUST → SHOULD.
- MUST requirements always override SHOULD recommendations in case of conflict.

## Universal Discovery (MUST/SHOULD Tiers)
```bash
# Discovery commands for NHI tiers
.nhi/bin/discover.sh .nhi/must json
.nhi/bin/discover.sh .nhi/should json
```

## Reflex Discovery (Capabilities/Implementations)
Reflexes encapsulate specific functionalities or build processes within the system. To discover available reflexes and their capabilities (as defined in their `manifest.yml`):
```bash
# Discover available reflexes and output as JSON
./reflexes/bin/discover-reflexes.sh json
```

## Tier 1: MUST Requirements (`.nhi/must/`)
- STOP - Check `.nhi/bin/discover.sh .nhi/must json`  before proceeding.
- These define **absolute requirements** (RFC 2119 **MUST**).
- They must be followed without exception.
- Read relevant MUST requirements completely, understand implications and interactions.
- Ensure fundamental compliance before considering SHOULD recommendations.

## Tier 2: SHOULD Recommendations (`.nhi/should/`)
- STOP - Check `.nhi/bin/discover.sh .nhi/should json` for task-relevant guidance after verifying MUST requirements.
- These provide **recommended** guidelines (RFC 2119 **SHOULD**).
- Follow explicit rules and patterns relevant to the task unless a strong, documented justification exists and no MUST requirement is violated.
- Apply by priority (lower number = higher priority).
- Verify alignment with MUST requirements during implementation.
- Adapt your approach to tool limitations, not vice versa, but always within the bounds set by MUST requirements.

## High-Risk Areas (Extra Scrutiny)
- Areas often governed by critical **MUST** level requirements (e.g., User data, security).
- Always re-verify relevant **MUST** requirements when working in these areas.
- Authentication/authorization, deployment, shared infrastructure.

## Framework Evolution
- Prioritize newer guidance when MUST requirements or SHOULD recommendations change.
- Document adaptations made during transitions.