---
title: Maintain Separation of Concerns
id: separation-of-concerns
priority: 50
description: Changes should respect and maintain existing modularity and separation of concerns within the codebase.
tier: must
tags:
  - domain:architecture
  - quality:code_organization
  - quality:system_design
  - scope:core
---

# Separation of Concerns

## Core Statement
Each component should have a single, well-defined responsibility.

## Rationale
When concerns are properly separated, components become more reusable, testable, and maintainable. The cognitive load of understanding any single piece is reduced, and the system as a whole becomes more adaptable to change.

## Applications
- Use clear boundaries between layers (e.g., UI, business logic, data access)
- Design interfaces that hide implementation details
- Break complex problems into smaller, focused pieces
- Avoid mixing different levels of abstraction within a component
- Prefer composition over inheritance
- Use dependency injection to decouple components
- Each function, module, or class should do one thing well
- Changes to one area should not require changes in unrelated areas