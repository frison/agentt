---
id: blog-article-provenance
title: "Blog Article Provenance Tracking"
priority: 201
description: "Ensuring blog articles correctly track author and origin information."
tags: ["blog", "provenance", "metadata", "authorship"]
domain: blog
related_guidance:
  behavior:
    - behavior/should/git-commit-format.bhv
---

# Add Git Commit Provenance to Blog Article

## Prerequisites
- Article committed to git in blog/content/
- [Git History Preservation](850-core-C_U_-git-history-preservation.mdc)

## Steps
1. Get article creation commit SHA (the commit where the file was first added, possibly under a different name):
   ```bash
   ARTICLE_FILE="path/to/your/article.md" # Replace with the actual article file path
   COMMIT_SHA=$(git log --follow --diff-filter=A --find-copies --find-renames --pretty=format:'%H' "${ARTICLE_FILE}" | tail -n 1)
   # This command traces the file's history, following renames/copies,
   # finds the commit where it was Added ('A'), and gets its SHA.
   ```
2. Get the prompt commit SHA (the commit that inspired the article, often the same as COMMIT_SHA). Determine this based on context or use COMMIT_SHA as default:
   ```bash
   PROMPT_SHA="${COMMIT_SHA}" # Adjust if a different prompt commit exists
   ```

3. Add to frontmatter:
   ```yaml
   provenance:
     repo: "https://github.com/frison/agentt"
     commit: "${COMMIT_SHA}"  # The commit where this article was created
     prompt: "${PROMPT_SHA}"  # The commit that prompted this article's creation. Can be same as commit SHA if the commit message itself served as the prompt
     modifications: []  # List of modification commit SHAs
   ```

4. Append to article:
   ```markdown
   ---

   *This article was originally created in commit [`${COMMIT_SHA}`](https://github.com/frison/agentt/commit/${COMMIT_SHA})${PROMPT_TEXT}.*
   ```
   where `${PROMPT_TEXT}` is `, prompted by commit [\`${PROMPT_SHA}\`](https://github.com/frison/agentt/commit/${PROMPT_SHA})` if a prompt commit exists, or empty string if not.

   Note: When the commit message itself serves as the prompt (i.e., `${PROMPT_SHA}` equals `${COMMIT_SHA}`), we still include both references to maintain consistency and make the relationship explicit.

5. Commit changes:
   ```bash
   git add blog/content/your-article.md
   git commit -m "docs(blog): add provenance information"
   ```

## Adding Modification Attestation

1. Get modification commit SHA:
   ```bash
   MOD_SHA=$(git rev-parse HEAD)
   ```

2. Update frontmatter modifications array:
   ```yaml
   provenance:
     repo: "https://github.com/frison/agentt"
     commit: "original-sha"
     modifications:
       - "${MOD_SHA}"
   ```

3. Append to article's provenance section:
   ```markdown
   *Modified in commit [`${MOD_SHA}`](https://github.com/frison/agentt/commit/${MOD_SHA}).*
   ```

4. Commit changes:
   ```bash
   git add blog/content/your-article.md
   git commit -m "docs(blog): add modification provenance"
   ```

## Validation
- Provenance points to article creation commit
- If present, prompt points to the commit that inspired the article
- Modifications list contains all update commits
- Links use absolute URLs
- Original commit SHA preserved
- Provenance statements isolated from content
- If present, prompt points to the commit that inspired the article
- Modifications list contains all update commits
- Links use absolute URLs
- Original commit SHA preserved
- Provenance statements isolated from content