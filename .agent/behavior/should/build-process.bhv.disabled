---
description:
globs:
alwaysApply: false
---
# SHOULD: Build Process and Dependency Management (060)

**Status:** Proposed
**Scope:** Core Repository Structure
**Applies To:** Developers modifying Dockerfiles, base images, or build scripts.

## 1. Purpose

This document outlines the recommended process for building container images within this repository, focusing on understanding dependencies between core Cortex images, Reflex base tools, and individual Reflexes. Adhering to this guidance helps ensure consistency and prevent stale image issues.

## 2. Core Base Images & Build Commands

Several foundational images are used. Understanding their build process is key:

*   **Cortex Images (`cortex/` directory):**
    *   Built using `make` targets within the `./cortex` directory.
    *   `make base-image`: Builds the foundational OS/dependency layer.
    *   `make golang`: Builds the Go development environment image (depends on `base-image`).
    *   `make ruby`: Builds the Ruby development environment image (depends on `base-image`).
*   **Reflex Base Tools (`reflexes/.base-tools`):**
    *   Provides common tools and utilities for reflexes.
    *   Built using `./reflexes/bin/build reflexes/.base-tools`.
    *   Depends on `cortex/golang:local` for its build environment.
*   **Individual Reflexes (e.g., `reflexes/generate/jekyll-site`):**
    *   Built using `./reflexes/bin/build <reflex_path>` (e.g., `./reflexes/bin/build reflexes/generate/jekyll-site`).
    *   Dependencies vary; often depend on a Cortex image (e.g., `cortex/ruby`) and/or `reflexes/.base-tools`.

## 3. Build Dependency Graph

The following diagram illustrates the primary build dependencies observed in the main workflows (e.g., blog deployment):

```mermaid
graph TD
    subgraph Cortex
        CortexBase[Cortex Base Image] --> CortexRuby[Cortex Ruby Image];
        CortexBase --> CortexGolang[Cortex Golang Image];
    end

    subgraph Reflexes
        CortexGolang -- Build Env --> ReflexBaseTools[Reflexes .base-tools];
        %% Check reflex Dockerfile for exact FROM line
        ReflexBaseTools -- Tools --> JekyllReflex[Reflex Jekyll Site];
         CortexRuby -- Base --> JekyllReflex;
    end

    subgraph Build Commands
        B1[make -C cortex base-image] --> CortexBase;
        B2[make -C cortex ruby] --> CortexRuby;
        B3[make -C cortex golang] --> CortexGolang;
        B4[./reflexes/bin/build reflexes/.base-tools] --> ReflexBaseTools;
        B5[./reflexes/bin/build reflexes/generate/jekyll-site] --> JekyllReflex;
    end

    style CortexBase fill:#f9f,stroke:#333,stroke-width:2px
    style CortexRuby fill:#f9f,stroke:#333,stroke-width:2px
    style CortexGolang fill:#f9f,stroke:#333,stroke-width:2px
    style ReflexBaseTools fill:#ccf,stroke:#333,stroke-width:2px
    style JekyllReflex fill:#ccf,stroke:#333,stroke-width:2px
```

*Note: The exact base image (`FROM ...`) for individual reflexes like `JekyllReflex` should be confirmed by inspecting their specific `Dockerfile`.*

## 4. Rebuild Policy (SHOULD)

To maintain consistency and ensure changes propagate correctly:

*   **RECOMMENDATION:** When a base image is modified (e.g., its `Dockerfile` changes, or its own base is updated), it **SHOULD** be rebuilt.
*   **RECOMMENDATION:** After rebuilding a base image, all *direct downstream dependents* (images that use the modified image in their `FROM` instruction or rely on tools built into it) **SHOULD** also be rebuilt.

*   **Example 1:** If `cortex/Dockerfile` (for `base-image`) is changed:
    1.  Rebuild `cortex/base-image` (`make -C cortex base-image`).
    2.  Rebuild `cortex/golang` (`make -C cortex golang`).
    3.  Rebuild `cortex/ruby` (`make -C cortex ruby`).
    4.  Rebuild `reflexes/.base-tools` (`./reflexes/bin/build reflexes/.base-tools`) because its build depends on the updated `cortex/golang`.
    5.  Rebuild dependent reflexes like `jekyll-site` (`./reflexes/bin/build reflexes/generate/jekyll-site`) because they depend on the updated `cortex/ruby` and potentially `.base-tools`.
*   **Example 2:** If `reflexes/.base-tools/Dockerfile` is changed (like adding `discover-reflexes`):
    1.  Rebuild `reflexes/.base-tools` (`./reflexes/bin/build reflexes/.base-tools`).
    2.  Rebuild any reflex that uses `reflexes/.base-tools` as its `FROM` image or relies on the tools within it (e.g., rebuild `jekyll-site` if it uses `.base-tools`).

## 5. Verification

*   Build logs (especially in CI/CD workflows like GitHub Actions) provide evidence of rebuilds.
*   Locally, inspecting Docker image history (`docker history <image>`) or creation dates (`docker images`) can help verify recent builds, though tags can sometimes obscure this.
