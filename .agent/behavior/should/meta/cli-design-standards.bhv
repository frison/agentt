---
title: "CLI Design and Usability Standards Practice"
description: "Conventions for consistent, usable CLI commands and flags for humans and AI."
priority: 403
tags:
  - scope:cli
  - standard:convention
  - usability:predictable
  - usability:ai-friendly
  - flags:design
  - commands:design
  - output:structured
  - interaction:non-interactive
tier: should
---

# CLI Design and Usability Standards Practice

## Core Statement

CLIs must provide a consistent, predictable, well-documented experience optimized for both human and automated use.

## Rationale

Good CLI design simplifies learning, usage, and automation. Consistency reduces cognitive load; non-interactive defaults prevent errors.

## Applications

- **Structure:** Use hierarchical commands (`noun verb`) and clear names.
- **Flags:** Use conventional syntax (`--long`, `-s`). Provide short flags for common options. Use for behavior modification, not primary commands. Ensure non-interactive suitability.
- **Help:** Implement comprehensive `-h`/`--help` for all commands/subcommands, detailing flags, args, defaults, and examples.
- **Output:**
    *   Use standard streams correctly: `stdout` for primary command output (e.g., requested data like JSON), `stderr` for logs, errors, and diagnostic messages.
    *   Support structured output formats (JSON via `--output json`) on `stdout` for easier parsing by scripts or AI agents.
    *   Use standard exit codes consistently to indicate success (0) or failure (non-zero).
    *   Offer verbosity control (`-v`/`-q`) affecting log output on `stderr`.
- **Consistency:** Maintain consistent naming and argument parsing across the tool.
- **Non-Interactivity:** Default to non-interactive operation. Clearly designate or flag any interactive modes. Adhere to `bhv-Non-Interactive Command Safety`.